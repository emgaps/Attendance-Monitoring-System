<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        fPS7AAAAAElFTkSuQmCC
</value>
  </data>
</root>